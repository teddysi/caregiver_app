"use strict";
var core_1 = require("@angular/core");
var nativescript_couchbase_1 = require("nativescript-couchbase");
core_1.Injectable();
var Database = (function () {
    /*
    private pull: any;
    private push: any;
    */
    function Database() {
        if (!this.isInstantiated) {
            this.storage = new nativescript_couchbase_1.Couchbase("caregiver");
            this.createViews();
            this.isInstantiated = true;
        }
    }
    Database.prototype.createViews = function () {
        this.storage.createView("caregiver", "1", function (document, emitter) {
            emitter.emit(document._id, document);
        });
        this.storage.createView("data", "1", function (document, emitter) {
            if (document.type == "data") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("user", "1", function (document, emitter) {
            if (document.type == "user") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("materials", "1", function (document, emitter) {
            if (document.type == "materials") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("needs", "1", function (document, emitter) {
            if (document.type == "needs") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("patients", "1", function (document, emitter) {
            if (document.type == "patients") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("ratings", "1", function (document, emitter) {
            if (document.type == "ratings") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("global", "1", function (document, emitter) {
            if (document.type == "global") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("quiz", "1", function (document, emitter) {
            if (document.type == "quiz") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("quizOnHold", "1", function (document, emitter) {
            if (document.type == "quizOnHold") {
                emitter.emit(document._id, document);
            }
        });
    };
    Database.prototype.getDatabase = function () {
        return this.storage;
    };
    return Database;
}());
exports.Database = Database;
//# sourceMappingURL=data:application/json;base64,