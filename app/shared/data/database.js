"use strict";
var core_1 = require("@angular/core");
var nativescript_couchbase_1 = require("nativescript-couchbase");
core_1.Injectable();
var Database = (function () {
    /*
    private pull: any;
    private push: any;
    */
    function Database() {
        if (!this.isInstantiated) {
            this.storage = new nativescript_couchbase_1.Couchbase("caregiver");
            this.createViews();
            this.isInstantiated = true;
        }
    }
    Database.prototype.createViews = function () {
        this.storage.createView("data", "1", function (document, emitter) {
            if (document.type == "data") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("user", "1", function (document, emitter) {
            if (document.type == "user") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("materials", "1", function (document, emitter) {
            if (document.type == "materials") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("needs", "1", function (document, emitter) {
            if (document.type == "needs") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("patients", "1", function (document, emitter) {
            if (document.type == "patients") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("ratings", "1", function (document, emitter) {
            if (document.type == "ratings") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("global", "1", function (document, emitter) {
            if (document.type == "global") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("quiz", "1", function (document, emitter) {
            if (document.type == "quiz") {
                emitter.emit(document._id, document);
            }
        });
        this.storage.createView("quizOnHold", "1", function (document, emitter) {
            if (document.type == "quizOnHold") {
                emitter.emit(document._id, document);
            }
        });
    };
    Database.prototype.getDatabase = function () {
        return this.storage;
    };
    return Database;
}());
exports.Database = Database;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0NBQTJDO0FBQzNDLGlFQUFtRDtBQUduRCxpQkFBVSxFQUFFLENBQUE7QUFDWjtJQUdJOzs7TUFHRTtJQUNGO1FBRUksRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksa0NBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMxQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFbkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDL0IsQ0FBQztJQUNMLENBQUM7SUFDTyw4QkFBVyxHQUFuQjtRQUNJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsVUFBQyxRQUFRLEVBQUUsT0FBTztZQUNuRCxFQUFFLENBQUEsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN6QyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQUMsUUFBUSxFQUFFLE9BQU87WUFDbkQsRUFBRSxDQUFBLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDekMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxVQUFDLFFBQVEsRUFBRSxPQUFPO1lBQ3hELEVBQUUsQ0FBQSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3pDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBQyxRQUFRLEVBQUUsT0FBTztZQUNwRCxFQUFFLENBQUEsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN6QyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLFVBQUMsUUFBUSxFQUFFLE9BQU87WUFDdkQsRUFBRSxDQUFBLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDekMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxVQUFDLFFBQVEsRUFBRSxPQUFPO1lBQ3RELEVBQUUsQ0FBQSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDNUIsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3pDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsVUFBQyxRQUFRLEVBQUUsT0FBTztZQUNyRCxFQUFFLENBQUEsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN6QyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQUMsUUFBUSxFQUFFLE9BQU87WUFDbkQsRUFBRSxDQUFBLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDekMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxVQUFDLFFBQVEsRUFBRSxPQUFPO1lBQ3pELEVBQUUsQ0FBQSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQztnQkFDL0IsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3pDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTSw4QkFBVyxHQUFsQjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFrQkwsZUFBQztBQUFELENBQUMsQUFuRkQsSUFtRkM7QUFuRlksNEJBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQ291Y2hiYXNlIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1jb3VjaGJhc2VcIjtcclxuaW1wb3J0IHsgQ29ubmVjdG9yU2VydmljZSB9IGZyb20gXCIuLi9jb25uZWN0b3IvY29ubmVjdG9yLnNlcnZpY2VcIjtcclxuXHJcbkluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGF0YWJhc2Uge1xyXG4gICAgcHJpdmF0ZSBzdG9yYWdlOiBhbnk7XHJcbiAgICBwcml2YXRlIGlzSW5zdGFudGlhdGVkOiBib29sZWFuO1xyXG4gICAgLypcclxuICAgIHByaXZhdGUgcHVsbDogYW55O1xyXG4gICAgcHJpdmF0ZSBwdXNoOiBhbnk7XHJcbiAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKC8vcHJpdmF0ZSBjb25uZWN0b3JTZXJ2aWNlOiBDb25uZWN0b3JTZXJ2aWNlXHJcbiAgICApIHtcclxuICAgICAgICBpZighdGhpcy5pc0luc3RhbnRpYXRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2UgPSBuZXcgQ291Y2hiYXNlKFwiY2FyZWdpdmVyXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVZpZXdzKCk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5pc0luc3RhbnRpYXRlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBjcmVhdGVWaWV3cygpIHtcclxuICAgICAgICB0aGlzLnN0b3JhZ2UuY3JlYXRlVmlldyhcImRhdGFcIiwgXCIxXCIsIChkb2N1bWVudCwgZW1pdHRlcikgPT4ge1xyXG4gICAgICAgICAgICBpZihkb2N1bWVudC50eXBlID09IFwiZGF0YVwiKSB7XHJcbiAgICAgICAgICAgICAgICBlbWl0dGVyLmVtaXQoZG9jdW1lbnQuX2lkLCBkb2N1bWVudCk7XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlLmNyZWF0ZVZpZXcoXCJ1c2VyXCIsIFwiMVwiLCAoZG9jdW1lbnQsIGVtaXR0ZXIpID0+IHtcclxuICAgICAgICAgICAgaWYoZG9jdW1lbnQudHlwZSA9PSBcInVzZXJcIikge1xyXG4gICAgICAgICAgICAgICAgZW1pdHRlci5lbWl0KGRvY3VtZW50Ll9pZCwgZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlLmNyZWF0ZVZpZXcoXCJtYXRlcmlhbHNcIiwgXCIxXCIsIChkb2N1bWVudCwgZW1pdHRlcikgPT4ge1xyXG4gICAgICAgICAgICBpZihkb2N1bWVudC50eXBlID09IFwibWF0ZXJpYWxzXCIpIHtcclxuICAgICAgICAgICAgICAgIGVtaXR0ZXIuZW1pdChkb2N1bWVudC5faWQsIGRvY3VtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc3RvcmFnZS5jcmVhdGVWaWV3KFwibmVlZHNcIiwgXCIxXCIsIChkb2N1bWVudCwgZW1pdHRlcikgPT4ge1xyXG4gICAgICAgICAgICBpZihkb2N1bWVudC50eXBlID09IFwibmVlZHNcIikge1xyXG4gICAgICAgICAgICAgICAgZW1pdHRlci5lbWl0KGRvY3VtZW50Ll9pZCwgZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlLmNyZWF0ZVZpZXcoXCJwYXRpZW50c1wiLCBcIjFcIiwgKGRvY3VtZW50LCBlbWl0dGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGRvY3VtZW50LnR5cGUgPT0gXCJwYXRpZW50c1wiKSB7XHJcbiAgICAgICAgICAgICAgICBlbWl0dGVyLmVtaXQoZG9jdW1lbnQuX2lkLCBkb2N1bWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnN0b3JhZ2UuY3JlYXRlVmlldyhcInJhdGluZ3NcIiwgXCIxXCIsIChkb2N1bWVudCwgZW1pdHRlcikgPT4ge1xyXG4gICAgICAgICAgICBpZihkb2N1bWVudC50eXBlID09IFwicmF0aW5nc1wiKSB7XHJcbiAgICAgICAgICAgICAgICBlbWl0dGVyLmVtaXQoZG9jdW1lbnQuX2lkLCBkb2N1bWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnN0b3JhZ2UuY3JlYXRlVmlldyhcImdsb2JhbFwiLCBcIjFcIiwgKGRvY3VtZW50LCBlbWl0dGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGRvY3VtZW50LnR5cGUgPT0gXCJnbG9iYWxcIikge1xyXG4gICAgICAgICAgICAgICAgZW1pdHRlci5lbWl0KGRvY3VtZW50Ll9pZCwgZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc3RvcmFnZS5jcmVhdGVWaWV3KFwicXVpelwiLCBcIjFcIiwgKGRvY3VtZW50LCBlbWl0dGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGRvY3VtZW50LnR5cGUgPT0gXCJxdWl6XCIpIHtcclxuICAgICAgICAgICAgICAgIGVtaXR0ZXIuZW1pdChkb2N1bWVudC5faWQsIGRvY3VtZW50KTtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnN0b3JhZ2UuY3JlYXRlVmlldyhcInF1aXpPbkhvbGRcIiwgXCIxXCIsIChkb2N1bWVudCwgZW1pdHRlcikgPT4ge1xyXG4gICAgICAgICAgICBpZihkb2N1bWVudC50eXBlID09IFwicXVpek9uSG9sZFwiKSB7XHJcbiAgICAgICAgICAgICAgICBlbWl0dGVyLmVtaXQoZG9jdW1lbnQuX2lkLCBkb2N1bWVudCk7XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0RGF0YWJhc2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZTtcclxuICAgIH1cclxuICAgIC8qXHJcbiAgICAgICAgcHVibGljIHN0YXJ0U3luYyhjb250aW51b3VzOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5wdXNoID0gdGhpcy5zdG9yYWdlLmNyZWF0ZVB1c2hSZXBsaWNhdGlvbihcImh0dHA6Ly8xOTIuMTY4LjU3LjE6NDk4NC90ZXN0LWRhdGFiYXNlXCIpO1xyXG4gICAgICAgIHRoaXMucHVsbCA9IHRoaXMuc3RvcmFnZS5jcmVhdGVQdWxsUmVwbGljYXRpb24oXCJodHRwOi8vMTkyLjE2OC41Ny4xOjQ5ODQvdGVzdC1kYXRhYmFzZVwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5wdXNoLnNldENvbnRpbnVvdXMoY29udGludW91cyk7XHJcbiAgICAgICAgdGhpcy5wdWxsLnNldENvbnRpbnVvdXMoY29udGludW91cyk7XHJcblxyXG4gICAgICAgIHRoaXMucHVzaC5zdGFydCgpO1xyXG4gICAgICAgIHRoaXMucHVsbC5zdGFydCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdG9wU3luYygpIHtcclxuICAgICAgICB0aGlzLnB1c2guc3RvcCgpO1xyXG4gICAgICAgIHRoaXMucHVsbC5zdG9wKCk7XHJcbiAgICB9XHJcbiAgICAqL1xyXG59XHJcbiJdfQ==