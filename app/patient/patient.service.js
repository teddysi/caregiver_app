"use strict";
var questionnaire_1 = require("../evaluation/questionnaire");
var question_1 = require("../evaluation/question");
require("rxjs/add/operator/map");
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var data_service_1 = require("../shared/data/data.service");
var connector_service_1 = require("../shared/connector/connector.service");
require("rxjs/add/operator/map");
require("rxjs/add/operator/do");
var PatientService = (function () {
    function PatientService(http, dataService, connectorService) {
        this.http = http;
        this.dataService = dataService;
        this.connectorService = connectorService;
        console.log('Instanciou - PatientService!');
    }
    PatientService.prototype.isFirstRequest = function () {
        return this.dataService.isPatientsRequestDone();
    };
    PatientService.prototype.getPatients = function () {
        return this.connectorService.getPatientsData();
    };
    PatientService.prototype.getPatients_BD = function () {
        this.patients = this.dataService.getPatientsData();
        console.log(this.patients);
        return this.patients;
    };
    PatientService.prototype.setPatients = function (patients) {
        this.dataService.setPatientsData(patients);
        this.patients = patients;
    };
    PatientService.prototype.getPatient = function (id) {
        return this.patients.filter(function (patient) { return patient.id === id; })[0];
    };
    //temp
    PatientService.prototype.getCaregiverQuestionnaires = function () {
        this.caregiverQuestionaires = [];
        var quest_ = new questionnaire_1.Questionnaire();
        this.caregiverQuestionaires[0] = quest_;
        this.caregiverQuestionaires[0].id = 0;
        this.caregiverQuestionaires[0].name = "questionario teste de caregiver";
        this.caregiverQuestionaires[0].reference = "caregiver";
        this.caregiverQuestionaires[0].reference_id = "1";
        this.caregiverQuestionaires[0].ref_questionnaire = "1"; //referencia interna
        this.caregiverQuestionaires[0].questions = [];
        var a = new question_1.Question();
        a.id = 0;
        a.question = "teste de questao tudo bem";
        a.type = "text";
        var b = new question_1.Question();
        b.id = 1;
        b.question = "teste de questao radio";
        b.type = "radio";
        b.values = "Sim;N達o;Talvez;";
        var c = new question_1.Question();
        c.id = 0;
        c.question = "teste de questao tudo bem2";
        c.type = "text";
        var d = new question_1.Question();
        d.id = 1;
        d.question = "teste de questao radio2";
        d.type = "radio";
        d.values = "Sim;N達o;Talvez;";
        this.caregiverQuestionaires[0].questions.push(a);
        this.caregiverQuestionaires[0].questions.push(b);
        this.caregiverQuestionaires[0].questions.push(c);
        this.caregiverQuestionaires[0].questions.push(d);
        var quest_1 = new questionnaire_1.Questionnaire();
        quest_1.id = 0;
        quest_1.name = "questionario teste de material";
        quest_1.reference = "material";
        quest_1.reference_id = "1";
        quest_1.ref_questionnaire = "2"; //referencia interna
        quest_1.questions = [];
        var a = new question_1.Question();
        a.id = 0;
        a.question = "teste de questao tudo bem";
        a.type = "text";
        var b = new question_1.Question();
        b.id = 1;
        b.question = "teste de questao radio";
        b.type = "radio";
        b.values = "Sim;N達o;Talvez;";
        var c = new question_1.Question();
        c.id = 0;
        c.question = "teste de questao tudo bem2";
        c.type = "text";
        var d = new question_1.Question();
        d.id = 1;
        d.question = "teste de questao radio2";
        d.type = "radio";
        d.values = "Sim;N達o;Talvez;";
        this.caregiverQuestionaires.push(quest_1);
        this.caregiverQuestionaires[1].questions.push(a);
        this.caregiverQuestionaires[1].questions.push(b);
        this.caregiverQuestionaires[1].questions.push(c);
        this.caregiverQuestionaires[1].questions.push(d);
        return this.caregiverQuestionaires;
    };
    return PatientService;
}());
PatientService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http, data_service_1.DataService, connector_service_1.ConnectorService])
], PatientService);
exports.PatientService = PatientService;
//# sourceMappingURL=data:application/json;base64,